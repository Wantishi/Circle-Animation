{"version":3,"sources":["logo.svg","circle-animation.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Circles","ref","useRef","useEffect","width","height","requestId","canvas","current","ctx","getContext","window","matchMedia","matches","style","render","angle","Math","PI","time","Date","revolution","getSeconds","getMilliseconds","radius","globalCompositeOperation","clearRect","strokeStyle","save","translate","beginPath","arc","stroke","rotate","i","restore","requestAnimationFrame","cancelAnimationFrame","App","className","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,0FC2F5BC,G,gBAzFC,WACd,IAAMC,EAAMC,mBAgFZ,OA9EAC,qBAAU,WACR,IAEIC,EACAC,EAwBAC,EA3BEC,EAASN,EAAIO,QACbC,EAAMF,EAAOG,WAAW,MAKR,qBAAXC,SACLA,OAAOC,WAAW,uBAAuBC,SAE3CT,EAAQ,IACRC,EAAS,KACAM,OAAOC,WAAW,sBAAsBC,SAEjDT,EAAQ,IACRC,EAAS,MAGTD,EAAQ,IACRC,EAAS,MAIbE,EAAOH,MAAQA,EACfG,EAAOF,OAASA,EAChBE,EAAOO,MAAMV,MAAb,UAAwBA,EAAxB,MACAG,EAAOO,MAAMT,OAAb,UAAyBA,EAAzB,MA+CA,OA5Ce,SAATU,IACJ,IAAMC,EAAkB,EAAVC,KAAKC,GACbC,EAAO,IAAIC,KACXC,EACF,EAAIJ,KAAKC,GAAM,EAAKC,EAAKG,aACzB,EAAIL,KAAKC,GAAM,IAAQC,EAAKI,kBAE5BC,EAASpB,EAAQ,EAErBK,EAAIgB,yBAA2B,mBAC/BhB,EAAIiB,UAAU,EAAG,EAAGtB,EAAOC,GAE3BI,EAAIkB,YAAc,0BAClBlB,EAAImB,OACJnB,EAAIoB,UAAUzB,EAAQ,EAAGC,EAAS,GAGlCI,EAAIqB,YACJrB,EAAIsB,IAAI,EAAG,EAAGP,EAAS,EAAG,EAAGR,GAAO,GACpCP,EAAIuB,SAGJvB,EAAIqB,YACJrB,EAAIwB,OAAOZ,GACXZ,EAAIoB,UAAUL,EAlBM,YAkB8B,GAClDf,EAAIsB,IAAI,EAAG,EAAGP,EAnBM,MAmBiB,EAAG,EAAGR,GAAO,GAClDP,EAAIuB,SAGJ,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IACrBzB,EAAIqB,YACJrB,EAAIwB,OAAOZ,GACXG,GA1BkB,MA2BlBf,EAAIoB,UAAUL,EA3BI,YA2BgC,GAClDf,EAAIsB,IAAI,EAAG,EAAGP,EA5BI,MA4BmB,EAAG,EAAGR,GAAO,GAClDP,EAAIuB,SAGNvB,EAAI0B,UACJ7B,EAAY8B,sBAAsBrB,GAGpCA,GAEO,WACLsB,qBAAqB/B,OAKvB,4BACEL,IAAKA,MCxEIqC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAAS7B,OACP,kBAAC,IAAM8B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.840b42d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { useEffect, useRef } from \"react\";\nconst Circles = () => {\n  const ref = useRef();\n\n  useEffect(() => {\n    const canvas = ref.current;\n    const ctx = canvas.getContext(\"2d\");\n    let width;\n    let height;\n\n    // draw clean lines for high-res monitors (2x)\n    if (typeof window !== \"undefined\") {\n      if (window.matchMedia(\"(min-width: 1160px)\").matches) {\n        // Desktop size\n        width = 700;\n        height = 700;\n      } else if (window.matchMedia(\"(min-width: 768px)\").matches) {\n        // Tablet size\n        width = 372;\n        height = 372;\n      } else {\n        // Mobile size\n        width = 246;\n        height = 246;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    let requestId;\n    const render = () => {\n      const angle = Math.PI * 2;\n      const time = new Date();\n      const revolution =\n        ((2 * Math.PI) / 8) * time.getSeconds() +\n        ((2 * Math.PI) / 8000) * time.getMilliseconds();\n      const goldenRatio = 1.618;\n      let radius = width / 2;\n\n      ctx.globalCompositeOperation = \"destination-over\";\n      ctx.clearRect(0, 0, width, height); // clear canvas\n\n      ctx.strokeStyle = \"rgba(181, 199, 192, .5)\";\n      ctx.save();\n      ctx.translate(width / 2, height / 2); // center axis\n\n      // Bounding Circle\n      ctx.beginPath();\n      ctx.arc(0, 0, radius - 1, 0, angle, true);\n      ctx.stroke();\n\n      // ring 1\n      ctx.beginPath();\n      ctx.rotate(revolution);\n      ctx.translate(radius / goldenRatio / goldenRatio, 0);\n      ctx.arc(0, 0, radius / goldenRatio - 1, 0, angle, true);\n      ctx.stroke();\n\n      // rings 2-7\n      for (let i = 0; i < 7; i++) {\n        ctx.beginPath();\n        ctx.rotate(revolution);\n        radius = radius / goldenRatio;\n        ctx.translate(radius / goldenRatio / goldenRatio, 0);\n        ctx.arc(0, 0, radius / goldenRatio - 1, 0, angle, true);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n      requestId = requestAnimationFrame(render);\n    };\n\n    render();\n\n    return () => {\n      cancelAnimationFrame(requestId);\n    };\n  });\n\n  return (\n    <canvas\n      ref={ref}\n      // style={{ width: width+'px', height: height+'px' }}\n    />\n  );\n};\n\nexport default Circles;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Circles from './circle-animation';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Circles />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}